# -*- coding: utf-8 -*-
"""term_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Aw9E5oE7SUIhpey4CUa47MqGt6eEvnHG
"""

def LCS_DP (DNA=12):
  from random import randint
  if type(DNA) == int:
    nucleotides = ['A', 'C', 'G', 'T']
    X = ''
    Y = ''
    for i in range(0, DNA):
      X += nucleotides[randint(0,3)]
    for i in range(0, DNA):
      Y += nucleotides[randint(0,3)]
  else:
    DNA = DNA.slipt()
    Y = DNA[1]
    X = DNA[0]

  m =  len(X)
  n = len(Y)
  L = [[None]*(n + 1) for i in range(m + 1)]
  for i in range(m + 1):
    for j in range(n + 1):
      if i == 0 or j == 0:
        L[i][j] = 0
      elif X[i - 1] == Y[j-1]:
        L[i][j] = L[i-1][j-1]+1
      else:
        L[i][j] = max(L[i-1][j], L[i][j-1])
  print(X,Y)
  print('Intermediate Table of Values: ')
  for l in L:
    print(l)
  return print('The length of LCS is ', L[m][n])

def lcs(X, Y, m, n):

    if m == 0 or n == 0:
       return 0;
    elif X[m-1] == Y[n-1]:
       return 1 + lcs(X, Y, m-1, n-1);
    else:
       return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));



X = "AGGTAB"
Y = "GXTXAYB"
print ("Length of LCS is ", lcs(X, Y, len(X), len(Y)))

def lcs(X, Y):

    m = len(X)
    n = len(Y)


    L = [[None]*(n + 1) for i in range(m + 1)]

    """Following steps build L[m + 1][n + 1] in bottom up fashion
    Note: L[i][j] contains length of LCS of X[0..i-1]
    and Y[0..j-1]"""
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0 :
                L[i][j] = 0
            elif X[i-1] == Y[j-1]:
                L[i][j] = L[i-1][j-1]+1
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])


    return L[m][n]



X = "AGGTAB"
Y = "GXTXAYB"
print("Length of LCS is ", lcs(X, Y))