# -*- coding: utf-8 -*-
"""Lab_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/158XKp2ZUZ--21MNiCLopRtAkWBbOzeMY

Q1: (20 points) Write a python function (naming it to find_max) to find the maximum number in a list. The function should accept any list of integers, and return the maximum values.
After the function is defined, verify your results using the built-in function 'max()'.
sample list: [5,3,2,1]
expected output: 5
[Hint:  # Defining a negative infinite number: negative_infinity = float('-inf')]
"""

def find_max(input):
  max = float('-inf')
  for i in input:
    if i > max:
      max = i
  return max

find_max([5,3,2,1])

"""Q2: (20 points) Write a python function to calculate the length of elements in a list. The function should accept any list of integers, and return the length of the list.
After the function is defined, verify your results using the built-in function 'len()'.
sample list: [5,3,2,1]
expected output: 4
"""

def find_len(input):
  input = [5,3,2,1]

def cal_len(input):
  #input = [5,3,2,1]
  count = 0
  for i in input:
    count = count + 1
  print('length of the input list is', count)


my_list = [5,3,2,1]
cal_len(my_list)

def cal_len2(input):
  #input = [5,3,2,1]
  count = 0
  for i in input:
    count = count + 1
  return count


my_list = [5,3,2,1]
print('length of the input is', cal_len2(my_list))

"""Q3:(20 points) Write a python function to sum all numbers in a list. The function should accept any list of integers, and return the sum value.
After the function is defined, verify your results using the built-in function 'sum()'.
sample list: [5,3,2,1]
expected output: 11

"""

def sum_numbers(input):
  #input = [5,3,2,1]
  sum = 0
  for i in input:
    sum = sum + i
  return sum

my_list = [5,3,2,1]
print("sum of the list from my defined function", sum_numbers(my_list))
print("sum of the list from predefined function", sum(my_list))

"""Q4:(5 points) Assume that we have 5 DNA motifs that have the following strings:

TTCAT
AATCATGA
CCCGC
GGCATT
CACGT

which are comprised of four nucleotides (e.g. A, T, C, G). We would like to define a variable called 'DNA_motifs', and store these sequences in this variable using the data type list. Then we need to print the variable by print("DNA_motifs: ", DNA_motifs)
Please write your python codes for this activity.
"""

DNA_motifs = ['TTCAT', 'AATCATGA', 'CCCGC',  'GGCATT',  'CACGT']
print("DNA_motifs:", DNA_motifs)

"""Q5: (25 points) Based on the defined list 'DNA_motifs' in question 4, please write a python function (naming it to find_motifs) to get motifs that contain the string 'C?C' ('?' can be one of 'A', 'C', 'G', 'T'). The function should accept any list of DNA sequences, and print out the expected strings that satisfy the criteria.
expected sample output:

CCCGC
CACGT
"""

def find_motifs(DNA_motifs):
  for motif in DNA_motifs:
    if 'CAC' in motif or 'CCC' in motif or 'CGC' in motif or 'CTC' in motif:
      print(motif)
find_motifs(DNA_motifs)

"""Q6:(5 points) Change the function (naming it to return_motifs) you made for Q5 to return the expected output as a list and print the returned output. The expected sample output is
['CCCGC', 'CACGT']
"""

def return_motifs(DNA_motifs):
  list_return = []
  for motif in DNA_motifs:
     if 'CAC' in motif or 'CCC' in motif or 'CGC' in motif or 'CTC' in motif:
       list_return.append(motif)
  return list_return
print(return_motifs(DNA_motifs))