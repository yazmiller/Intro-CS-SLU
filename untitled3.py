# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xutgwi0uiww6qOk05dkx4KH1pNK7cf5A
"""

x = s[6]
print(x)

mylist=["ab", "CDE", "x"]
x = len(mylist)
print(x)

Mylist = ["orange","banana","apple","grape"]
Mystring = "314-800-2346"
len(Mystring)

for i in range (5,10,2):
  print (i)
  print ("we are here")

print ('   ',end ='')

for i in range (1,5):

       print (i, " ",end='')

print ('\n   ',end='')

value = 0

for j in range (0,10):

    print ('-',end='')

print ()

for x in range (1,3):

    print (x,'|',end='')

    for y in range (1,5):

        print ((value+1) *y, ' ',end='')

    print ()

    value = value + 1

num = int(input("Input right front pressure \n"))
num2 = int(input("Input left front pressure \n"))
num3 = int(input("Input right front pressure \n"))
num4= int(input("Input left front pressure \n"))

count = 0
while (count < 5):
    count = count + 1
    print("Hello")

A = 19
B = 7
while A > B:
  print (A,B)
  if (A + B) < 24:
    B = B + 5
  else:
    A=A-2

x = 5 //2 + 3 * 9 - 4%3
print(x)

class Person:
   def __init__(self):
      self.name = ''

person1 = Person()
username = 'Rio'

person1.name = username
print(f'You are {person1.name}')

class Person:
   def __init__(self):
      self.name = ''

person1 = Person()
username = 'Ron'
different_username = 'Rio'

person1.name = username
print(person1.name)
person1.name = different_username
print(person1.name)

class Duration:
    def __init__(self, hours, minutes):
        self.hours = hours
        self.minutes = minutes

    def __lt__(self, other):
        if self.hours < other.hours:
            return True
        elif self.hours == other.hours:
            if self.minutes < other.minutes:
                return True
        return False

workday = Duration(7, 45)
monday_time = Duration(7, 30)
tuesday_time = Duration(10, 45)
wednesday_time = Duration(6, 0)

print(monday_time < workday)
print(tuesday_time < workday)
print(wednesday_time < workday)
print(monday_time < wednesday_time)

class Vehicle:
    def __init__(self):
        self.speed = 0

    def set_speed(self, speed_to_set):
        self.speed = speed_to_set

    def print_speed(self):
        print(self.speed)


class Car(Vehicle):
    def print_car_speed(self):
        print('Driving at: ', end = '')
        self.print_speed()


class ElectricCar(Car):
    def __init__(self):
        self.battery_level = 0

    def set_battery_level(self, level_to_set):
        self.battery_level = level_to_set

    def print_battery_level(self):
        print(f'Battery: {self.battery_level}')


myCar = ElectricCar()
myCar.set_speed(30)
myCar.set_battery_level(10)

myCar.print_car_speed()
myCar.print_battery_level()

# "New" means new compared to previous level
def scramble_nums(remain_nums, scram_nums):
    if len(remain_nums) == 0:
        print(scram_nums[0], scram_nums[1], scram_nums[2], sep='')
    else:
        for i in reversed(range(len(remain_nums))): # New: This line changed
            tmp_remain_nums = remain_nums[:] # Make a copy.
            tmp_removed_num = tmp_remain_nums[i]
            tmp_remain_nums.pop(i) # Remove element at i
            scram_nums.append(tmp_removed_num)
            scramble_nums(tmp_remain_nums, scram_nums)
            scram_nums.pop() # Remove last element

nums_to_scramble = []
result_nums = []

nums_to_scramble.append(4)
nums_to_scramble.append(1)
nums_to_scramble.append(6)

scramble_nums(nums_to_scramble, result_nums)

valid_password = False

while valid_password == False:
    try:
        password = input()

        if len(password) < 8:
            raise ValueError('Invalid')

        valid_password = True
        print('Accepted')

    except ValueError as excpt:
        print(f'Error: {excpt}')